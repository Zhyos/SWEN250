#Aaron Starr
#Class-File Main
#Desc - acts as the GUI/Menu for the user to input data and complete commands

#require 'csv' #unused
require './FoodDB.rb'
require './BasicFood.rb'
require './Recipe.rb'
require './LogItem.rb'
require './Log.rb'
require 'date'
require 'time'

puts("Welcome to Diet Manager v1")
puts("Enter the name of the Food Database file, including .txt\n(I made it FoodDB.txt, was annoying typing it in, you can uncomment if you want)")
@filestart = "FoodDB.txt" #gets.strip()

InternalDB = Hash.new #Hash that will be changed
InternalDB["0"] = []
InternalDB["1"] = []
OriginalDB = Hash.new #Hash for reference, if changes were made
OriginalDB["0"] = []
OriginalDB["1"] = []

ArrayLog = [] #Log file, able to be changed
ArrayLogO = [] #Original log file

text = File.open(@filestart, "r")
lines = text.readlines
text.close

lines.each do |line|
  linearr = line.strip().split(',')

  if linearr[1] == "b"
    InternalDB["0"] = InternalDB["0"].push(linearr)
    OriginalDB["0"] = OriginalDB["0"].push(linearr)
  elsif linearr[1] == "r"
    InternalDB["1"] = InternalDB["1"].push(linearr)
    OriginalDB["1"] = OriginalDB["1"].push(linearr)
  else
    raise 'Wrong data structure, check file'
  end

end

puts("Enter the name of the Diet Log file, including .txt\n(I made it DietLog.txt, was annoying typing it in, you can uncomment if you want)")
@filestart2 = "DietLog.txt" #gets.strip()

text2 = File.open(@filestart2, "r")
lines2 = text2.readlines
text2.close

lines2.each do |line|
  linearr2 = line.strip.split(',')

    incrembas = 0
    incremrec = 0

    for g in 0..(InternalDB["0"].length - 1) #Go through basic foods
      if InternalDB["0"][g].include?(linearr2[1]) #Does position g have the food?
        break #it sure does, who cares any more, break out.
      else
        incrembas += 1
      end
    end
    for i in 0..(InternalDB["1"].length - 1)
      if InternalDB["1"][i].include?(linearr2[1])
        break
      else
        incremrec += 1
      end
    end
    if incrembas == InternalDB["0"].length && incremrec == InternalDB["1"].length #it in basic foods
      raise('ERROR:Basic food nor Recipe food not in database')
    end



  date = Date.parse(linearr2[0])
  ArrayLog.push([date,linearr2[1]])
  ArrayLogO.push([date,linearr2[1]])

end

time = Time.now
year = time.year.to_s
month = time.month.to_s
day = time.day.to_s
dated = year + "-" + month + "-" + day
@date = dated

@peon = "work, work" #nostalgic memory? (Warcraft III)

while @peon == "work, work" do

  puts("***What would you like to do?; type help for supported commands.***")
  peonjob = gets.chomp!


  if peonjob == "help"
    puts("--- Database Commands ---")
    puts("print all - Print all food in current database\nquit - Quit and Save database/log\nprint <name> - Print information on named food")
    puts("find <prefix> - Print information on foods that start with prefix\nnew food <name,calories> - Add food to database")
    puts("new recipe <name,ingred1, ...ingredN> - Add recipe with name first, then ingredients\nsave - save current database/log to text file")
    puts("date - Shows the current date")
    puts("------ Log Commands -----")
    puts("log <name> - add a food item to the log with today's date\nlog <name,date> - add a food item to the log with the date provided")
    puts("show all - show the current log\nshow - show log data for today's date\nshow <date> - show log data for supplied date")
    puts("NOTES:")
    puts("All comma separated input is to not have spaces around the comma. Correct: test,test2. Incorrect test, test2")
    puts("All dates are to be entered in the format: YYYY-MM-DD. For example: 2005-09-20")
    puts("")


    #log <name> or log <name,date>
  elsif peonjob[0..2] == "log"
    puts("")
    temparr = peonjob.split(" ")
    tempdata = temparr[1] #= peonjob[4..peonjob.length - 1].split("")
    tempchars = tempdata.split("")

    counter = 0
    index = 0

    tempchars.each do |i|
      if i == ","

        newarrB = tempdata.split(",")
        name1 = newarrB[0]
        rawdate = newarrB[1]
        date = Date.parse(rawdate)

        #puts("found comma")
        @ArrayLog = LogItem.log2(InternalDB, name1, date, ArrayLog)
        counter = 1

      elsif index == tempchars.size - 1 && counter == 0

        #puts("Reached end, no comma")
        name2 = temparr[1]
        date2 = Date.parse(@date)
        @ArrayLog = LogItem.log1(InternalDB, name2, date2, ArrayLog)
        counter += 1

      end
      index += 1
    end
    puts("")


    #show all
  elsif peonjob == "show all"
    puts("")
    sorted = ArrayLog.sort
    puts(sorted)
    puts("")


    #date
  elsif peonjob == "date"
    puts("")
    puts("YYYY-MM-DD")
    puts(@date)
    puts("")


    #show
  elsif peonjob == "show"
    puts("")
    sorted = ArrayLog.sort
    sorted.each do |i|
      if i[0].to_s == @date.to_s
        puts(i)
      end
    end
    puts("")


    #show <date>
  elsif peonjob[0..3] == "show"
    puts("")
    tempdate = peonjob.split(" ")[1]
    date = Date.parse(tempdate)
    sorted = ArrayLog.sort
    sorted.each do |i|
      if i[0].to_s == date.to_s
        puts(i)
      end
    end
    puts("")


    #delete <name,date>
  elsif peonjob[0..5] == "delete"
    puts("")
    tempdata = peonjob.split(" ")[1]
    tempname = tempdata.split(",")[0]
    tempdate = tempdata.split(",")[1]
    date = Date.parse(tempdate)
    sorted = ArrayLog.sort
    sorted.each do |i|
      if i[0].to_s == date.to_s && i[1] == tempname
        index = ArrayLog.index(i)
        @ArrayLog = Log.deletelogitem(ArrayLog, index)
      end
    end
    puts("")


    #new food 'name,calories'
  elsif peonjob[0..7] == "new food"
    puts("")
    seperB = peonjob[9..peonjob.length - 1]

    newarrB = seperB.split(",")
    name1 = newarrB[0]
    calor = newarrB[1]

    InternalDB["0"] = BasicFood.newfood(InternalDB, name1, calor)
    puts("")


    #new recipe 'name, ingred1,...'
  elsif peonjob[0..9] == "new recipe"
    puts("")
    seperR = peonjob[11..peonjob.length - 1]

    newarrR = seperR.split(",")
    nameR = newarrR.shift #remove from front of list and return

    InternalDB["1"] = Recipe.newrecipe(InternalDB, nameR, newarrR)

    puts("")


    #print all
  elsif peonjob == "print all"
    puts("")
    FoodDB.printall(InternalDB)
    puts("")


    #print 'name'
  elsif peonjob[0..4] == "print" #was already checked for print all command
    puts("")
    nameinput = peonjob[6..peonjob.length] #removes parsing or splitting method calls
    FoodDB.printe(InternalDB, nameinput)
    puts("")


    #I split this up from FoodDB into 2 methods, 1 in Recipe, 1 in BasicFood
    #find 'str'
  elsif peonjob[0..3] == "find"
    puts("")

    findsubstr = peonjob[5..peonjob.length]

    errTestB = BasicFood.finditB(InternalDB["0"], findsubstr, InternalDB)
    errTestR = Recipe.finditR(InternalDB["1"], findsubstr, InternalDB)

    if errTestB == false && errTestR == false
      print 'ERROR:Food not found in current database.'
    end
    puts("")


    #save
  elsif peonjob == "save"
    puts("")

    FoodDB.save(InternalDB)

    InternalDB["0"] = []
    InternalDB["1"] = []
    OriginalDB["0"] = []
    OriginalDB["1"] = []

    text = File.open(@filestart, "r")
    lines = text.readlines
    text.close

    lines.each do |line|
      linearr = line.strip().split(',')

      if linearr[1] == "b"
        InternalDB["0"] = InternalDB["0"].push(linearr)
        OriginalDB["0"] = OriginalDB["0"].push(linearr)
      elsif linearr[1] == "r"
        InternalDB["1"] = InternalDB["1"].push(linearr)
        OriginalDB["1"] = OriginalDB["1"].push(linearr)
      else
        raise 'Wrong data structure, check file'
      end
    end

    Log.save(ArrayLog)

    @ArrayLog = []
    @ArrayLogO = []

    text2 = File.open(@filestart2, "r")
    lines2 = text2.readlines
    text2.close

    lines2.each do |line|
      linearr2 = line.strip().split(',')

      incrembas = 0
      incremrec = 0

      for g in 0..(InternalDB["0"].length - 1) #Go through basic foods
        if InternalDB["0"][g].include?(linearr2[1]) #Does position g have the food?
          break #it sure does, who cares any more, break out.
        else
          incrembas += 1
        end
      end
      for i in 0..(InternalDB["1"].length - 1)
        if InternalDB["1"][i].include?(linearr2[1])
          break
        else
          incremrec += 1
        end
      end
      if incrembas == InternalDB["0"].length && incremrec == InternalDB["1"].length #it in basic foods
        raise('ERROR:Basic food nor Recipe food not in database')
      end



      date = Date.parse(linearr2[0])
      ArrayLog.push([date,linearr2[1]])
      ArrayLogO.push([date,linearr2[1]])

    end
    puts("")


    #quit
  elsif peonjob == "quit"
    if InternalDB == OriginalDB && ArrayLog.uniq.sort == ArrayLogO.uniq.sort #Makes arrays unique, and sorts for comparison
      puts("No Modifications Detected...\nGoodbye.")
      @peon = "What you want?"

    else
      puts("Modifications Detected...\nWould you like to save and quit (y) or quit (n)")
      choice = gets.strip()

      if choice.downcase == "y"
        FoodDB.save(InternalDB)
        Log.save(ArrayLog)
        puts("Saved.\nGoodbye.")
        @peon = "What you want?"
      elsif choice.downcase == "n"
        puts("Not Saved.\nGoodbye.")
        @peon = "What you want?"
      else
        puts("Not a valid choice; returning to menu.")
      end
    end

    #puts("Goodbye.")
    #@peon = "What you want?"
  end
end
