#Aaron Starr
#Class Recipe
#Desc - Do things with recipes, such as add new ones

require './FoodDB'

class Recipe

  #adds a new basic food to hash table
  #I: hash, string, string
  #O: array or print
  def self.newrecipe(hash, recname, recing)

    increm = 0

    #iterate through and check if recipe name exists
    for g in 0..(hash["1"].length - 1)
      if hash["1"][g][0] == recname
        print 'ERROR:Recipe already in the database'
        return hash["1"] #if it does, print error and return to normal
      end
    end

    #iterate through to see if ingredients are in database of basic food
    for food in recing
      for g in 0..(hash["0"].length - 1)
        if hash["0"][g].include?(food)
          increm = -1 #its in database, force it to not raise error
        else
          increm += 1
        end
        if increm == hash["0"].length #it isn't in database
          print 'ERROR:Basic food not in database'
          return hash["1"] #print error, return to normal
        end
      end
    end

    recing.unshift("r").unshift(recname.to_s) #add to front of array
    hash["1"].push(recing) #add array to hash table
    return hash["1"] #return updated hash table value-array
  end

  #Find function for recipes
  #I: array, string, hash table
  #O: print and bool
  def self.finditR(array1, string, hash)

    @foundone = 0 #used to tell if a match was found but still iterate

    for g in array1

      stringdown = string.downcase()
      lenlimit = (string.length - 1)
      namedown = g[0][0..lenlimit].downcase()

      if namedown.include? stringdown #does the name of a food in hash table equal string?
        FoodDB.printe(hash, g[0])
        @foundone = 1
      end
    end
    if @foundone == 1
      return true
    else
      return false
    end
  end

end
